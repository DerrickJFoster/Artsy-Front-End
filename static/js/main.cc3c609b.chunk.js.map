{"version":3,"sources":["components/SearchArt.js","App.js","serviceWorker.js","index.js"],"names":["baseURL","SearchArt","state","keyword","art","handleChange","event","_this","setState","Object","defineProperty","target","id","value","getArt","preventDefault","fetch","then","data","json","error","console","log","jsonData","react_default","a","createElement","className","onSubmit","this","type","placeholder","onChange","Component","App","components_SearchArt","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0SACMA,EAAU,0GA4CDC,6MAzCbC,MAAQ,CACNC,QAAS,GACTC,IAAK,MAEPC,aAAe,SAACC,GACdC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACGH,EAAMK,OAAOC,GAAKN,EAAMK,OAAOE,WAGpCC,OAAS,SAACR,GACRA,EAAMS,iBACNC,MAAMhB,EAAQO,EAAKL,MAAMC,SACxBc,KAAK,SAAAC,GAAI,OAAIA,EAAKC,QAAQ,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,KAC/CH,KAAK,SAAAM,GAAQ,OAAIhB,EAAKC,SAAS,CAC9BJ,IAAKmB,EACLpB,QAAS,MACP,SAAAiB,GAAK,OAAIC,QAAQC,IAAIF,8EAGzB,OACEI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,QAAME,SAAUC,KAAKf,QACnBU,EAAAC,EAAAC,cAAA,SACEd,GAAG,UACHkB,KAAK,OACLC,YAAY,UACZlB,MAAOgB,KAAK3B,MAAMC,QAClB6B,SAAUH,KAAKxB,eAEjBmB,EAAAC,EAAAC,cAAA,SACEd,GAAG,SACHe,UAAU,iBACVG,KAAK,SACLjB,MAAM,6BAlCMoB,aCoBTC,gOAhBbhC,MAAQ,CACNU,GAAI,4EAGJ,OACEY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,mDAEFF,EAAAC,EAAAC,cAACS,EAAD,cAXUF,cCMEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC","file":"static/js/main.cc3c609b.chunk.js","sourcesContent":["import React, { Component } from \"react\"\nconst baseURL = \"https://www.rijksmuseum.nl/api/en/collection?key=5p5zT3Jl&format=json&s=relevance&imgonly=true&ps=20&q=\"\n\nclass SearchArt extends Component {\n  state = {\n    keyword: \"\",\n    art: {}\n  }\n  handleChange = (event) => {\n    this.setState({\n      [event.target.id]: event.target.value\n    })\n  }\n  getArt = (event) => {\n    event.preventDefault()\n    fetch(baseURL+this.state.keyword)\n    .then(data => data.json(), error => console.log(error))\n    .then(jsonData => this.setState({\n      art: jsonData,\n      keyword: \"\"\n    }), error => console.log(error))\n  }\n  render() {\n    return (\n      <div className=\"search-art\">\n        <form onSubmit={this.getArt}>\n          <input\n            id=\"keyword\"\n            type=\"text\"\n            placeholder=\"keyword\"\n            value={this.state.keyword}\n            onChange={this.handleChange}\n          />\n          <input\n            id=\"submit\"\n            className=\"button-primary\"\n            type=\"submit\"\n            value=\"Get Inspiration\"\n          />\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default SearchArt\n","import React, { Component } from \"react\";\nimport SearchArt from \"./components/SearchArt.js\"\nimport \"./css/normalize.css\"\nimport \"./css/skeleton.css\"\nimport \"./css/App.css\";\n\nclass App extends Component {\n  state = {\n    id: \"\"\n  }\n  render() {\n    return (\n      <div className=\"app\">\n        <header className=\"app-header\">\n          <h1>kickstART</h1>\n          <p>Find Inspiration And Spark Creativity</p>\n        </header>\n        <SearchArt />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}