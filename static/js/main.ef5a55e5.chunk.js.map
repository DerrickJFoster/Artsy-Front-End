{"version":3,"sources":["components/SearchArt.js","components/PostTest.js","App.js","serviceWorker.js","index.js"],"names":["baseURL","saveURL","SearchArt","state","keyword","art","handleChange","event","_this","setState","Object","defineProperty","target","id","value","getArt","preventDefault","fetch","then","data","json","error","console","log","jsonData","artObjects","saveArt","longTitle","webImage","url","method","body","JSON","stringify","title","imageurl","usernotes","userid","headers","Content-Type","apiResponse","_this2","this","react_default","a","createElement","className","onSubmit","type","placeholder","onChange","map","key","principalOrFirstMaker","src","alt","onClick","Component","PostArt","postArt","App","components_SearchArt","PostTest","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ef5a55e5.chunk.js","sourcesContent":["import React, { Component } from \"react\"\nconst baseURL = \"https://www.rijksmuseum.nl/api/en/collection?key=5p5zT3Jl&format=json&s=relevance&imgonly=true&ps=12&q=\"\nconst saveURL = \"https://kickstart-me.herokuapp.com/art\"\n\nclass SearchArt extends Component {\n  state = {\n    keyword: \"\",\n    art: []\n  }\n  handleChange = (event) => {\n    this.setState({\n      [event.target.id]: event.target.value\n    })\n  }\n  getArt = (event) => {\n    event.preventDefault()\n    fetch(baseURL+this.state.keyword)\n    .then(data => data.json(), error => console.log(error))\n    .then(jsonData => this.setState({\n      art: jsonData.artObjects,\n      keyword: \"\"\n    }), error => console.log(error))\n  }\n  saveArt = (art) => {\n    console.log(art.longTitle, art.webImage.url);\n    fetch(saveURL, {\n      method: \"POST\",\n      body: JSON.stringify({\n        title: art.longTitle,\n        imageurl: art.webImage.url,\n        usernotes: \"\",\n        userid: \"\"\n      }),\n      headers: {\n        \"Content-Type\":\"application/json\"\n      }\n    })\n    .then(data => data.json(), error => console.log(error))\n    .then(jsonData => this.setState({\n      apiResponse: jsonData\n    }), error => console.log(error))\n  }\n  render() {\n    return (\n      <div className=\"search-art\">\n        <form onSubmit={this.getArt}>\n          <input\n            id=\"keyword\"\n            type=\"text\"\n            placeholder=\"keyword\"\n            value={this.state.keyword}\n            onChange={this.handleChange}\n          />\n          <input\n            id=\"submit\"\n            className=\"button-primary\"\n            type=\"submit\"\n            value=\"Get Inspiration\"\n          />\n        </form>\n        <div className=\"show-art\">\n          {\n            this.state.art.map((art) => {\n              return (\n                <div className=\"art-piece\" key={art.id}>\n                  <h5>{art.longTitle}</h5>\n                  <p>{art.principalOrFirstMaker}</p>\n                  <img src={art.webImage.url} alt={art.title}/>\n                  <button\n                    onClick={() => {\n                      this.saveArt(art)\n                    }}\n                    >Add To Favorites</button>\n                </div>\n              )\n            })\n          }\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default SearchArt\n","import React, { Component } from \"react\"\nconst baseURL = \"https://kickstart-me.herokuapp.com/art\"\n\nclass PostArt extends Component {\n  state = {\n    title: \"\"\n  }\n  handleChange = (event) => {\n    this.setState({\n      [event.target.id]: event.target.value\n    })\n  }\n  postArt = (event) => {\n    event.preventDefault()\n    console.log(this.state.title, baseURL);\n    fetch(baseURL, {\n      method: \"POST\",\n      body: JSON.stringify({\n        title: this.state.title\n      }),\n      headers: {\n        \"Content-Type\":\"application/json\"\n      }\n    })\n    .then(data => data.json(), error => console.log(error))\n    .then(jsonData => this.setState({\n      title: \"\",\n      apiResponse: jsonData\n    }), error => console.log(error))\n  }\n  render() {\n    return (\n      <div className=\"post-test\">\n        <form onSubmit={this.postArt}>\n          <input\n            id=\"title\"\n            type=\"text\"\n            placeholder=\"title\"\n            value={this.state.title}\n            onChange={this.handleChange}\n          />\n          <input\n            id=\"submit\"\n            className=\"button-primary\"\n            type=\"submit\"\n            value=\"Post To Andrew\"\n          />\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default PostArt\n","import React, { Component } from \"react\";\nimport SearchArt from \"./components/SearchArt.js\"\nimport PostTest from \"./components/PostTest.js\"\nimport \"./css/normalize.css\"\nimport \"./css/skeleton.css\"\nimport \"./css/App.css\";\n\nclass App extends Component {\n  state = {\n    id: \"\"\n  }\n  render() {\n    return (\n      <div className=\"app\">\n        <header className=\"app-header\">\n          <h1>kickstART</h1>\n          <p>Find Inspiration And Spark Creativity</p>\n        </header>\n        <SearchArt />\n        <PostTest />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}