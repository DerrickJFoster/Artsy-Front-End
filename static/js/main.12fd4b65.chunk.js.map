{"version":3,"sources":["components/SearchArt.js","components/Favorites.js","components/Update.js","App.js","serviceWorker.js","index.js"],"names":["baseURL","saveURL","SearchArt","state","keyword","art","handleChange","event","_this","setState","Object","defineProperty","target","id","value","getArt","preventDefault","fetch","then","data","json","error","console","log","jsonData","artObjects","saveArt","longTitle","webImage","url","method","body","JSON","stringify","title","imageurl","usernotes","userid","headers","Content-Type","apiResponse","_this2","this","react_default","a","createElement","className","onSubmit","type","placeholder","onChange","map","key","principalOrFirstMaker","src","alt","onClick","Component","Favorites","favorites","showUpdateId","getFavorites","showNotes","fav","_id","saveIdeas","copyFavorites","toConsumableArray","findIndex","APIupdateResponse","deleteFavorite","response","index","splice","APIresponse","name","localURL","App","components_SearchArt","components_Favorites","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.12fd4b65.chunk.js","sourcesContent":["import React, { Component } from \"react\"\r\nconst baseURL = \"https://www.rijksmuseum.nl/api/en/collection?key=5p5zT3Jl&format=json&s=relevance&imgonly=true&ps=12&q=\"\r\nconst saveURL = \"https://kickstart-me.herokuapp.com/art\"\r\n\r\nclass SearchArt extends Component {\r\n  state = {\r\n    keyword: \"\",\r\n    art: []\r\n  }\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      [event.target.id]: event.target.value\r\n    })\r\n  }\r\n  getArt = (event) => {\r\n    event.preventDefault()\r\n    fetch(baseURL+this.state.keyword)\r\n    .then(data => data.json(), error => console.log(error))\r\n    .then(jsonData => this.setState({\r\n      art: jsonData.artObjects,\r\n      keyword: \"\"\r\n    }), error => console.log(error))\r\n  }\r\n  saveArt = (art) => {\r\n    console.log(art.longTitle, art.webImage.url);\r\n    fetch(saveURL, {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        title: art.longTitle,\r\n        imageurl: art.webImage.url,\r\n        usernotes: \"\",\r\n        userid: \"\"\r\n      }),\r\n      headers: {\r\n        \"Content-Type\":\"application/json\"\r\n      }\r\n    })\r\n    .then(data => data.json(), error => console.log(error))\r\n    .then(jsonData => this.setState({\r\n      apiResponse: jsonData\r\n    }), error => console.log(error))\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"search-art\">\r\n        <form onSubmit={this.getArt}>\r\n          <input\r\n            id=\"keyword\"\r\n            type=\"text\"\r\n            placeholder=\"keyword\"\r\n            value={this.state.keyword}\r\n            onChange={this.handleChange}\r\n          />\r\n          <input\r\n            id=\"submit\"\r\n            className=\"button-primary\"\r\n            type=\"submit\"\r\n            value=\"Get Inspiration\"\r\n          />\r\n        </form>\r\n        <div className=\"show-art\">\r\n          {\r\n            this.state.art.map((art) => {\r\n              return (\r\n                <div className=\"art-piece\" key={art.id}>\r\n                  <h5>{art.longTitle}</h5>\r\n                  <p>{art.principalOrFirstMaker}</p>\r\n                  <img src={art.webImage.url} alt={art.title}/>\r\n                  <button\r\n                    onClick={() => {\r\n                      this.saveArt(art)\r\n                    }}\r\n                    >Add To Favorites</button>\r\n                </div>\r\n              )\r\n            })\r\n          }\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SearchArt\r\n","import React, { Component } from \"react\"\r\nconst baseURL = \"https://kickstart-me.herokuapp.com/art\"\r\n\r\nclass Favorites extends Component {\r\n  state = {\r\n    favorites: [],\r\n    showUpdateId: \"\",\r\n    usernotes: \"\"\r\n  }\r\n  getFavorites = () => {\r\n    fetch(baseURL\r\n      //+\"/\"+this.props.id\r\n    )\r\n    .then((data) => {\r\n      return data.json()\r\n    }, (error) => {\r\n      console.log(error)\r\n    })\r\n    .then((jsonData) => {\r\n      this.setState({\r\n        favorites: jsonData\r\n      })\r\n    })\r\n  }\r\n  showNotes = (fav) => {\r\n    this.setState({\r\n      showUpdateId: fav._id\r\n    })\r\n  }\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      [event.target.id]: event.target.value\r\n    })\r\n  }\r\n  saveIdeas = (event) => {\r\n    event.preventDefault()\r\n    fetch(baseURL+\"/\"+this.state.showUpdateId, {\r\n      method: \"PUT\",\r\n      body: JSON.stringify({usernotes: this.state.usernotes}),\r\n      headers: {\r\n        \"Content-Type\":\"application/json\"\r\n      }\r\n    })\r\n    .then((data) => {\r\n      return data.json()\r\n    }, (error) => {\r\n      console.log(error)\r\n    })\r\n    .then((jsonData) => {\r\n      const copyFavorites = [...this.state.favorites]\r\n      const index = this.state.favorites.findIndex(fav => fav._id === jsonData._id)\r\n      copyFavorites[index].usernotes = jsonData.usernotes\r\n      this.setState({\r\n        showUpdateId: \"\",\r\n        usernotes: \"\",\r\n        APIupdateResponse: jsonData,\r\n        favorites: copyFavorites\r\n      })\r\n    })\r\n  }\r\n  deleteFavorite = (fav) => {\r\n    fetch(baseURL+\"/\"+fav._id, {\r\n      method: \"DELETE\"\r\n    }).then((response) => {\r\n      return response.json()\r\n    }).then((json) => {\r\n      const copyFavorites = [...this.state.favorites]\r\n      const index = this.state.favorites.findIndex(fav => fav._id === json._id)\r\n      copyFavorites.splice(index, 1)\r\n      this.setState({\r\n        favorites: copyFavorites,\r\n        APIresponse: json\r\n      })\r\n    })\r\n  }\r\n  componentDidMount() {\r\n    this.getFavorites()\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"favorites container\">\r\n        <h2>Your Saved Favorites</h2>\r\n        {\r\n          this.state.favorites.map((fav) => {\r\n            return (\r\n              <div className=\"fav\" key={fav._id}>\r\n                <h5>{fav.title}</h5>\r\n                {/* <p>{fav.artist}</p> */}\r\n                <img src={fav.imageurl} alt={fav.title}/>\r\n                {\r\n                  fav.usernotes ?\r\n                  <div className=\"usernotes\">\r\n                    <h5>Your Ideas:</h5>\r\n                    <form onSubmit={this.saveIdeas}>\r\n                      <input\r\n                        id=\"usernotes\"\r\n                        className=\"eight column\"\r\n                        type=\"text\"\r\n                        placeholder={fav.usernotes}\r\n                        onChange={this.handleChange}\r\n                      />\r\n                      <input type=\"submit\"\r\n                        value=\"Update Ideas\"\r\n                      />\r\n                    </form>\r\n                    <button\r\n                      onClick={() => {\r\n                        this.deleteFavorite(fav)\r\n                      }}\r\n                      >Delete</button>\r\n                  </div>\r\n                  :\r\n                    this.state.showUpdateId === fav._id ?\r\n                    <form onSubmit={this.saveIdeas}>\r\n                      <input\r\n                        className=\"eight columns\"\r\n                        type=\"text\"\r\n                        id=\"usernotes\"\r\n                        name=\"usernotes\"\r\n                        value={this.state.usernotes}\r\n                        onChange={this.handleChange}\r\n                      />\r\n                      <input type=\"submit\"\r\n                        className=\"button-primary\"\r\n                        value=\"Save Ideas\"\r\n                      />\r\n                    </form>\r\n                    :\r\n                    <div className=\"actions\">\r\n                      <button className=\"button-primary\"\r\n                        onClick={() => {\r\n                          this.showNotes(fav)\r\n                        }}\r\n                        >Add Your Ideas</button>\r\n                        <button\r\n                          onClick={() => {\r\n                            this.deleteFavorite(fav)\r\n                          }}\r\n                          >Delete</button>\r\n                    </div>\r\n                }\r\n              </div>\r\n            )\r\n          })\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Favorites\r\n","import React, {Component} from 'react'\r\nconst baseURL = \"https://www.rijksmuseum.nl/api/en/collection?key=5p5zT3Jl&format=json&s=relevance&imgonly=true&ps=20&q=\"\r\nconst localURL = 'http://localhost:3003'\r\n\r\nclass Update extends Component{\r\n  state={\r\n    keyword: '',\r\n    usernotes: ''\r\n  }\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      [event.target.id]: event.target.value\r\n    })\r\n  }\r\n  handleSubmit = (event) => {\r\n    event.preventDefault()\r\n    console.log(this.state.usernotes);\r\n    fetch(localURL +'/art/5d17bbe3cf222ca50bb8b21a', {\r\n      method: 'PUT',\r\n      body: JSON.stringify({\r\n        usernotes: this.state.usernotes\r\n      }),\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    })\r\n    .then(response => response.json())\r\n    .then(responseJSON => console.log(responseJSON))\r\n    .catch(err => console.log(err))\r\n    this.setState({\r\n      usernotes: ''\r\n    })\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            id=\"keyword\"\r\n            onChange={this.handleChange}\r\n            />\r\n          <input type=\"submit\"/>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Update\r\n","import React, { Component } from \"react\";\r\nimport SearchArt from \"./components/SearchArt.js\"\r\nimport Favorites from \"./components/Favorites.js\"\r\n//import PostTest from \"./components/PostTest.js\"\r\nimport \"./css/normalize.css\"\r\nimport \"./css/skeleton.css\"\r\nimport \"./css/App.css\";\r\nimport Update from './components/Update.js'\r\n\r\nclass App extends Component {\r\n  state = {\r\n    id: \"\"\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <header className=\"app-header\">\r\n          <h1>kickstART</h1>\r\n          <p>Find Inspiration And Spark Creativity</p>\r\n        </header>\r\n        <SearchArt />\r\n        <Favorites />\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}